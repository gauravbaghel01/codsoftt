#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function prototypes
void initializeBoard(vector<vector<char>>& board);
void displayBoard(const vector<vector<char>>& board);
bool isMoveValid(const vector<vector<char>>& board, int row, int col);
bool checkForWin(const vector<vector<char>>& board, char player);
bool checkForDraw(const vector<vector<char>>& board);
bool playTicTacToe();
bool playAgain();

int main() {
    cout << "Welcome to Tic-Tac-Toe!" << endl;

    do {
        bool win = playTicTacToe();

        if (win) {
            cout << "Congratulations! You won the game." << endl;
        } else {
            cout << "It's a draw!" << endl;
        }

    } while (playAgain());

    cout << "Thank you for playing Tic-Tac-Toe! Goodbye." << endl;

    return 0;
}

void initializeBoard(vector<vector<char>>& board) {
    // Initialize the 3x3 board with empty spaces
    for (int i = 0; i < 3; ++i) {
        vector<char> row(3, ' ');
        board.push_back(row);
    }
}

void displayBoard(const vector<vector<char>>& board) {
    // Display the current state of the board
    cout << "-------------" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl << "-------------" << endl;
    }
}

bool isMoveValid(const vector<vector<char>>& board, int row, int col) {
    // Check if the cell is empty and within bounds
    return (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ');
}

bool checkForWin(const vector<vector<char>>& board, char player) {
    // Check all possible win conditions
    for (int i = 0; i < 3; ++i) {
        // Check rows and columns
        if ((board[i][0] == player && board[i][1] == player && board[i][2] == player) ||
            (board[0][i] == player && board[1][i] == player && board[2][i] == player)) {
            return true;
        }
    }
    // Check diagonals
    if ((board[0][0] == player && board[1][1] == player && board[2][2] == player) ||
        (board[0][2] == player && board[1][1] == player && board[2][0] == player)) {
        return true;
    }
    return false;
}

bool checkForDraw(const vector<vector<char>>& board) {
    // Check if the board is full (no more empty spaces)
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') {
                return false; // Found an empty space, game is not a draw
            }
        }
    }
    return true; // Board is full, game is a draw
}

bool playTicTacToe() {
    vector<vector<char>> board;
    initializeBoard(board);

    char currentPlayer = 'X';
    int row, col;

    while (true) {
        // Display board
        displayBoard(board);

        // Prompt current player for their move
        cout << "Player " << currentPlayer << ", enter your move (row and column): ";
        cin >> row >> col;

        // Validate the move
        if (isMoveValid(board, row, col)) {
            // Update the board
            board[row][col] = currentPlayer;

            // Check if the current player wins
            if (checkForWin(board, currentPlayer)) {
                displayBoard(board);
                cout << "Player " << currentPlayer << " wins!" << endl;
                return true;
            }

            // Check if the game is a draw
            if (checkForDraw(board)) {
                displayBoard(board);
                cout << "It's a draw!" << endl;
                return false;
            }

            // Switch players
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        } else {
            cout << "Invalid move. Please try again." << endl;
        }
    }
}

bool playAgain() {
    char choice;
    cout << "Do you want to play again? (Y/N): ";
    cin >> choice;
    return (choice == 'Y' || choice == 'y');
}
